for(i in 1:4) print(cor(anscombe[i],anscombe[i+4]),digits=4)  #loop to print all correlations
anscombe	 #this should just print the dataset so you can make sure it is there and see the variable names.
rbind(mean=apply(anscombe,2,mean),sd=apply(anscombe,2,sd))  #means and sds for datasets
for(i in 1:4) print(cor(anscombe[i],anscombe[i+4]),digits=4)  #loop to print all correlations
pK <- function(x,base,series) {
#creates the function base10toK
base10toK<-function(x,base){
b <- base
i=0
sum=0
while(x%/%b!=0){
sum<-sum+((x%%b)*(10^i))
i=i+1
x<-x%/%base
}
sum<-sum+((x%%b)*(10^i))
return(sum)
}
# display the series for given base
b <- base
s <- series
n <- 0
m <- 0
v <- c()
for (i in 1:s) {
if(n==0) {				#for the first pass, initiates the vector with 0 as its first item
v <- append(v,0)
n <- n + 1
}
else {					#after the initial pass converts every number to base7 using the
m <- base10toK(n,b)		#"base10to7" function
v <- append(v,m)		#adds the next number to the vector
n <- n + 1
}
}
return(v)
}
pk(100,8,20)
pK(100,8,20)
pK <- function(base,series) {
#creates the function base10toK
base10toK<-function(x,base){
b <- base
i=0
sum=0
while(x%/%b!=0){
sum<-sum+((x%%b)*(10^i))
i=i+1
x<-x%/%base
}
sum<-sum+((x%%b)*(10^i))
return(sum)
}
# display the series for given base
b <- base
s <- series
n <- 0
m <- 0
v <- c()
for (i in 1:s) {
if(n==0) {				#for the first pass, initiates the vector with 0 as its first item
v <- append(v,0)
n <- n + 1
}
else {					#after the initial pass converts every number to base7 using the
m <- base10toK(n,b)		#"base10to7" function
v <- append(v,m)		#adds the next number to the vector
n <- n + 1
}
}
return(v)
}
pK(8,20)
library(dplyr)
library(ggplot2)
library(scales)
library(gridExtra)
library(gtools)
##Set working directory, load data into dataframes
setwd("/Users/albertasuncion_mac/Documents/SMU/6306 - Intro to DS/rWD/")
fedstats <- read.csv(file="getdata%2Fdata%2FEDSTATS_Country.csv",header=TRUE)
##Skipping 2 empty rows from original file
gdp <- read.csv(file="getdata%2Fdata%2FGDP.csv",header=TRUE,skip=3)
## Remove NA columns
gdp <- gdp[-c(3,6:10)]
## Rename columns, 1st column in particular in order to prepare for dta merge
names(gdp) <- c("CountryCode","Ranking","Country","GDP")
head(gdp)
head(fedstats)
df_merged <- merge(fedstats, gdp, by="CountryCode")
head(df_merged)
dim(df_merged)
df_merged.sorted <- df_merged
df_merged.sorted$GDP2 <- as.numeric(gsub(",","",df_merged$GDP))
df_merged.sorted <- arrange(df_merged.sorted,GDP2)
df_merged.sorted[13,1:2]
#converting the df_merged.sorted$Ranking column to numeric and creating a new variable Ranking2 for the transformed column
df_merged.sorted$Ranking2 <- as.numeric(df_merged.sorted$Ranking)
#create vectors for "High income: OECD" and "High income: nonOECD" groups
HighIncomeOECD <- subset(df_merged.sorted$Ranking2, df_merged.sorted$Income.Group == "High income: OECD")
HighIncomeNonOECD <- subset(df_merged.sorted$Ranking2, df_merged.sorted$Income.Group == "High income: nonOECD")
#calculate the means of the HighIncomeOECD and HighIncomeNonOECD vectors
Avg_HighIncomeOECD <- mean(HighIncomeOECD)
Avg_HighIncomeNonOECD <- mean(HighIncomeNonOECD)
Avg_HighIncomeOECD
Avg_HighIncomeNonOECD
p <- ggplot(subset(df_merged.sorted, Income.Group!=""), aes(y=reorder(CountryCode,GDP2),x=GDP2)) + geom_text(aes(color=Income.Group, label=CountryCode, size = 1)) + theme(axis.text=element_text(size=6)) + scale_x_continuous(name="GDP", labels=dollar) + ylab("Country") + facet_grid(. ~ Income.Group)
q <- ggplot(subset(df_merged.sorted, Income.Group!=""), aes(y=reorder(CountryCode,GDP2),x=GDP2)) + geom_point(aes(color=Income.Group)) + theme(axis.text=element_text(size=6)) + scale_x_continuous(name="GDP", labels=dollar) + ylab("Country") + facet_grid(. ~ Income.Group)
print(q)
ggsave("/Users/albertasuncion_mac/Documents/SMU/test.png", width=11, height = 14, dpi=300)
a <- ggplot(subset(df_merged.sorted, Income.Group=="High income: OECD"), aes(y=reorder(CountryCode,GDP2),x=GDP2)) + geom_point(aes(color=Income.Group)) + geom_point(colour="tomato") + theme(axis.text=element_text(size=6)) + scale_x_continuous(name="GDP", labels=dollar) + ylab("Country") + theme(legend.position = "none") + ggtitle("High Income: OECD") + theme(plot.title = element_text(size = 10, face="bold"))
b <- ggplot(subset(df_merged.sorted, Income.Group=="High income: nonOECD"), aes(y=reorder(CountryCode,GDP2),x=GDP2)) + geom_point(aes(color=Income.Group)) + geom_point(colour="steelblue") + theme(axis.text=element_text(size=6)) + scale_x_continuous(name="GDP", labels=dollar) + ylab("Country") + theme(legend.position = "none") + ggtitle("High Income: nonOECD") + theme(plot.title = element_text(size = 10, face="bold"))
c <- ggplot(subset(df_merged.sorted, Income.Group=="Upper middle income"), aes(y=reorder(CountryCode,GDP2),x=GDP2)) + geom_point(aes(color=Income.Group)) + geom_point(colour="seagreen") + theme(axis.text=element_text(size=6)) + scale_x_continuous(name="GDP", labels=dollar) + ylab("Country") + theme(legend.position = "none") + ggtitle("Upper Middle Income") + theme(plot.title = element_text(size = 10, face="bold"))
d <- ggplot(subset(df_merged.sorted, Income.Group=="Lower middle income"), aes(y=reorder(CountryCode,GDP2),x=GDP2)) + geom_point(aes(color=Income.Group)) + geom_point(colour="slateblue") + theme(axis.text=element_text(size=6)) + scale_x_continuous(name="GDP", labels=dollar) + ylab("Country") + theme(legend.position = "none") + ggtitle("Lower Middle Income") + theme(plot.title = element_text(size = 10, face="bold"))
e <- ggplot(subset(df_merged.sorted, Income.Group=="Low income"), aes(y=reorder(CountryCode,GDP2),x=GDP2)) + geom_point(aes(color=Income.Group)) + geom_point(colour="sienna") + theme(axis.text=element_text(size=6)) + scale_x_continuous(name="GDP", labels=dollar) + ylab("Country") + theme(legend.position = "none") + ggtitle("Low Income") + theme(plot.title = element_text(size = 10, face="bold"))
grid.arrange(arrangeGrob(a, b, c, ncol=3, heights = 20))
grid.arrange(arrangeGrob(d, e , ncol=3, heights = 20))
#Use the sorted data frame
#Filter records where GDP is NA
df_merged.sorted.nonNAGDP <- df_merged.sorted %>% filter(!is.na(GDP2))
#Create a grouping by Income Group
df_merged.sorted.nonNAGDP.grouped <- group_by(df_merged.sorted.nonNAGDP,Income.Group)
#Summarize GDP by Income Group, and summarize basic statistics
options(dplyr.width=Inf) #options forces all columns to appear in the output
summarise(df_merged.sorted.nonNAGDP.grouped,countries=n(),totGDP=dollar(sum(GDP2,na.rm=TRUE)),minGDP=dollar(min(GDP2,na.rm=TRUE)),maxGDP=dollar(max(GDP2,na.rm=TRUE)),meanGDP=dollar(mean(GDP2, na.rm=TRUE)),stddevGDP=dollar(sd(GDP2,na.rm=TRUE)))
#Add a column for the
df_merged.sorted.quartile <- setDT(df_merged.sorted)[, quartile := cut(df_merged.sorted$Ranking2, quantile(df_merged.sorted$Ranking2, probs=0:5/5), include.lowest=TRUE, labels=FALSE)]
library(dplyr)
library(ggplot2)
library(scales)
library(gridExtra)
library(gtools)
library(data.table)
library(dplyr)
library(ggplot2)
library(scales)
library(gridExtra)
library(gtools)
library(data.table)
##Set working directory, load data into dataframes
setwd("/Users/albertasuncion_mac/Documents/SMU/6306 - Intro to DS/rWD/")
fedstats <- read.csv(file="getdata%2Fdata%2FEDSTATS_Country.csv",header=TRUE)
##Skipping 2 empty rows from original file
gdp <- read.csv(file="getdata%2Fdata%2FGDP.csv",header=TRUE,skip=3)
## Remove NA columns
gdp <- gdp[-c(3,6:10)]
## Rename columns, 1st column in particular in order to prepare for dta merge
names(gdp) <- c("CountryCode","Ranking","Country","GDP")
head(gdp)
head(fedstats)
df_merged <- merge(fedstats, gdp, by="CountryCode")
head(df_merged)
dim(df_merged)
df_merged.sorted <- df_merged
df_merged.sorted$GDP2 <- as.numeric(gsub(",","",df_merged$GDP))
df_merged.sorted <- arrange(df_merged.sorted,GDP2)
df_merged.sorted[13,1:2]
#converting the df_merged.sorted$Ranking column to numeric and creating a new variable Ranking2 for the transformed column
df_merged.sorted$Ranking2 <- as.numeric(df_merged.sorted$Ranking)
#create vectors for "High income: OECD" and "High income: nonOECD" groups
HighIncomeOECD <- subset(df_merged.sorted$Ranking2, df_merged.sorted$Income.Group == "High income: OECD")
HighIncomeNonOECD <- subset(df_merged.sorted$Ranking2, df_merged.sorted$Income.Group == "High income: nonOECD")
#calculate the means of the HighIncomeOECD and HighIncomeNonOECD vectors
Avg_HighIncomeOECD <- mean(HighIncomeOECD)
Avg_HighIncomeNonOECD <- mean(HighIncomeNonOECD)
Avg_HighIncomeOECD
Avg_HighIncomeNonOECD
p <- ggplot(subset(df_merged.sorted, Income.Group!=""), aes(y=reorder(CountryCode,GDP2),x=GDP2)) + geom_text(aes(color=Income.Group, label=CountryCode, size = 1)) + theme(axis.text=element_text(size=6)) + scale_x_continuous(name="GDP", labels=dollar) + ylab("Country") + facet_grid(. ~ Income.Group)
q <- ggplot(subset(df_merged.sorted, Income.Group!=""), aes(y=reorder(CountryCode,GDP2),x=GDP2)) + geom_point(aes(color=Income.Group)) + theme(axis.text=element_text(size=6)) + scale_x_continuous(name="GDP", labels=dollar) + ylab("Country") + facet_grid(. ~ Income.Group)
print(q)
ggsave("/Users/albertasuncion_mac/Documents/SMU/test.png", width=11, height = 14, dpi=300)
a <- ggplot(subset(df_merged.sorted, Income.Group=="High income: OECD"), aes(y=reorder(CountryCode,GDP2),x=GDP2)) + geom_point(aes(color=Income.Group)) + geom_point(colour="tomato") + theme(axis.text=element_text(size=6)) + scale_x_continuous(name="GDP", labels=dollar) + ylab("Country") + theme(legend.position = "none") + ggtitle("High Income: OECD") + theme(plot.title = element_text(size = 10, face="bold"))
b <- ggplot(subset(df_merged.sorted, Income.Group=="High income: nonOECD"), aes(y=reorder(CountryCode,GDP2),x=GDP2)) + geom_point(aes(color=Income.Group)) + geom_point(colour="steelblue") + theme(axis.text=element_text(size=6)) + scale_x_continuous(name="GDP", labels=dollar) + ylab("Country") + theme(legend.position = "none") + ggtitle("High Income: nonOECD") + theme(plot.title = element_text(size = 10, face="bold"))
c <- ggplot(subset(df_merged.sorted, Income.Group=="Upper middle income"), aes(y=reorder(CountryCode,GDP2),x=GDP2)) + geom_point(aes(color=Income.Group)) + geom_point(colour="seagreen") + theme(axis.text=element_text(size=6)) + scale_x_continuous(name="GDP", labels=dollar) + ylab("Country") + theme(legend.position = "none") + ggtitle("Upper Middle Income") + theme(plot.title = element_text(size = 10, face="bold"))
d <- ggplot(subset(df_merged.sorted, Income.Group=="Lower middle income"), aes(y=reorder(CountryCode,GDP2),x=GDP2)) + geom_point(aes(color=Income.Group)) + geom_point(colour="slateblue") + theme(axis.text=element_text(size=6)) + scale_x_continuous(name="GDP", labels=dollar) + ylab("Country") + theme(legend.position = "none") + ggtitle("Lower Middle Income") + theme(plot.title = element_text(size = 10, face="bold"))
e <- ggplot(subset(df_merged.sorted, Income.Group=="Low income"), aes(y=reorder(CountryCode,GDP2),x=GDP2)) + geom_point(aes(color=Income.Group)) + geom_point(colour="sienna") + theme(axis.text=element_text(size=6)) + scale_x_continuous(name="GDP", labels=dollar) + ylab("Country") + theme(legend.position = "none") + ggtitle("Low Income") + theme(plot.title = element_text(size = 10, face="bold"))
grid.arrange(arrangeGrob(a, b, c, ncol=3, heights = 20))
grid.arrange(arrangeGrob(d, e , ncol=3, heights = 20))
#Use the sorted data frame
#Filter records where GDP is NA
df_merged.sorted.nonNAGDP <- df_merged.sorted %>% filter(!is.na(GDP2))
#Create a grouping by Income Group
df_merged.sorted.nonNAGDP.grouped <- group_by(df_merged.sorted.nonNAGDP,Income.Group)
#Summarize GDP by Income Group, and summarize basic statistics
options(dplyr.width=Inf) #options forces all columns to appear in the output
summarise(df_merged.sorted.nonNAGDP.grouped,countries=n(),totGDP=dollar(sum(GDP2,na.rm=TRUE)),minGDP=dollar(min(GDP2,na.rm=TRUE)),maxGDP=dollar(max(GDP2,na.rm=TRUE)),meanGDP=dollar(mean(GDP2, na.rm=TRUE)),stddevGDP=dollar(sd(GDP2,na.rm=TRUE)))
#Add a column for the
df_merged.sorted.quartile <- setDT(df_merged.sorted)[, quartile := cut(df_merged.sorted$Ranking2, quantile(df_merged.sorted$Ranking2, probs=0:5/5), include.lowest=TRUE, labels=FALSE)]
#Create a grouping by Income Group
df_merged.sorted.quartile.grouped <- group_by(df_merged.sorted.quartile,Income.Group,quartile)
#Summarize GDP by Income Group, and summarize basic statistics
SummaryStat <- aggregate(data=df_merged.sorted.quartile, df_merged.sorted.quartile$GDP2 ~ df_merged.sorted.quartile$Income.Group + df_merged.sorted.quartile$quartile, FUN=length)
SummaryStat
?select
countQ1 <- count(df_merged.sorted.quartile$quartile == "1")
countQ1 <- count(df_merged.sorted.quartile.grouped$quartile == "1")
countQ1 <- count(df_merged.sorted.quartile$quartile = 1)
countQ1 <- count(df_merged.sorted.quartile$quartile == 1)
countQ1 <- length(df_merged.sorted.quartile$quartile == 1)
countQ1
countQ1 <- length(df_merged.sorted.quartile$quartile == "1")
countQ1
countQ1 <- count(df_merged.sorted.quartile, df_merged.sorted.quartile$quartile == 1)
countQ1
summarise(df_merged.sorted.quartile,Q1=countQ1)
countQ1 = count(df_merged.sorted.quartile, df_merged.sorted.quartile$quartile == 1)
countQ1
countQ1 == count(df_merged.sorted.quartile, df_merged.sorted.quartile$quartile == 1)
#Add a column for the
df_merged.sorted.quartile <- setDT(df_merged.sorted)[, quartile := cut(df_merged.sorted$Ranking2, quantile(df_merged.sorted$Ranking2, probs=0:5/5), include.lowest=TRUE, labels=FALSE)]
#Create a grouping by Income Group
df_merged.sorted.quartile.grouped <- group_by(df_merged.sorted.quartile,Income.Group,quartile)
#Summarize GDP by Income Group, and summarize basic statistics
SummaryStat <- aggregate(data=df_merged.sorted.quartile, df_merged.sorted.quartile$GDP2 ~ df_merged.sorted.quartile$Income.Group + df_merged.sorted.quartile$quartile, FUN=length)
SummaryStat
install.packages("googlesheets")
library(googlesheets)
?googlesheets
gs_gap() %>%
gs_copy(to = "Gapminder")
gap <- gs_title("Gapminder")
gap
gs_browse()
gap %>% gs_browse()
?importxml
??importxml
gs_*
gs_ls()
gs_ls("Gapminder")
gap <- gs_title("Gapminder")
gap
Gapminder
?gs_auth
?gs_title
gap <- gs_title("Gapminder", verbose =TRUE)
gap <- gs_title("Gapminder")
gs_key(“1VhEpsrWLGiylz9Thoqdt1cOKQEcxhPBUQwYx9JArFW8”, verbose=TRUE)
gs_key(1VhEpsrWLGiylz9Thoqdt1cOKQEcxhPBUQwYx9JArFW8, verbose=TRUE)
gs_key("1VhEpsrWLGiylz9Thoqdt1cOKQEcxhPBUQwYx9JArFW8")
gs_key("1VhEpsrWLGiylz9Thoqdt1cOKQEcxhPBUQwYx9JArFW8", verbose = TRUE)
gs_url("https://docs.google.com/spreadsheets/d/1VhEpsrWLGiylz9Thoqdt1cOKQEcxhPBUQwYx9JArFW8/", verbose = TRUE)
gs_url("https://docs.google.com/spreadsheets/d/1VhEpsrWLGiylz9Thoqdt1cOKQEcxhPBUQwYx9JArFW8/", visibility = PUBLIC, verbose = TRUE)
gs_url("https://docs.google.com/spreadsheets/d/1VhEpsrWLGiylz9Thoqdt1cOKQEcxhPBUQwYx9JArFW8/", visibility = private, verbose = TRUE)
gs_url("https://docs.google.com/spreadsheets/d/1VhEpsrWLGiylz9Thoqdt1cOKQEcxhPBUQwYx9JArFW8/", visibility = "private", verbose = TRUE)
gs_url("https://docs.google.com/spreadsheets/d/1VhEpsrWLGiylz9Thoqdt1cOKQEcxhPBUQwYx9JArFW8/", visibility = "private")
gs_url("https://docs.google.com/spreadsheets/d/1VhEpsrWLGiylz9Thoqdt1cOKQEcxhPBUQwYx9JArFW8/", visibility = "private", verbose = FALSE)
glimpse()
Gapminder %>% glimpse
Gapminder %>% glimpse()
dim(Gapminder)
gs_title("Gapminder")
glimpse()
glimpse("Gapminder")
?gs_copy
gs_gap() %>% gs_copy(to = "Gapminder")
?gs_gap
gs_copy(from="Gapminder","Gapminder2")
gs_copy(from="Gapminder",to = "Gapminder2")
gs_copy(from  ="Gapminder", to = "Gapminder2")
gs_copy(from = "Gapminder", to = "Gapminder2")
library(dplyr)
df_merged.sorted$quartile2 <- ntile(df_merged.sorted$Ranking2, 5)
df_merged.sorted
ls(df_merged.sorted$quartile,df_merged.sorted$quartile2)
df_merged.sorted(c(,33:36))
df_merged.sorted[,c(33:36)]
names(df_merged.sorted)
df_merged.sorted[,c(1,37,38)]
ls(df_merged.sorted$quartile,df_merged.sorted$quartile2)
df_merged.sorted$quartile2
length(df_merged.sorted$quartile2)
temp <- subset(df_merged.sorted,c(1,3,37,38))
temp <- subset(df_merged.sorted,select = c(1,3,37,38))
temp
ls(temp)
?ls
ls(temp, all.names = TRUE)
temp[c(1,3,37,38)]
temp[1:500,]
write.table(temp,"/Users/albertasuncion_mac/Documents/SMU/6306 - Intro to DS/temp.csv")
write.csv(temp,"/Users/albertasuncion_mac/Documents/SMU/6306 - Intro to DS/temp.csv")
write.csv(temp,"/Users/albertasuncion_mac/Documents/SMU/6306 - Intro to DS/temp2.csv)
write.csv(temp,"/Users/albertasuncion_mac/Documents/SMU/6306 - Intro to DS/temp2.csv)
write.csv(temp,"/Users/albertasuncion_mac/Documents/SMU/6306 - Intro to DS/temp2.csv")
temp[c(1,3,36,37,38)]
name[temp]
names(temp)
temp <- subset(df_merged.sorted,select = c(1,3,37,38))
names(df_merged.sorted)
temp <- subset(df_merged.sorted,select = c(1,3,36,37,38))
temp
write.csv(temp,"/Users/albertasuncion_mac/Documents/SMU/6306 - Intro to DS/temp.csv")
names(df_merged.sorted)
temp <- subset(df_merged.sorted,select = c(1,3,32:38))
write.csv(temp,"/Users/albertasuncion_mac/Documents/SMU/6306 - Intro to DS/temp.csv")
df_merged.sorted.quartile <- setDT(df_merged.sorted)[, quartile := cut(df_merged.sorted$Ranking2, quantile(df_merged.sorted$Ranking, probs=0:5/5), include.lowest=TRUE, labels=FALSE)]
df_merged.sorted.quartile <- setDT(df_merged.sorted)[, quartile := cut(df_merged.sorted$Ranking2, quantile(as.numeric(df_merged.sorted$Ranking), probs=0:5/5), include.lowest=TRUE, labels=FALSE)]
temp <- subset(df_merged.sorted.quartile,select = c(1,3,36,37,38))
write.csv(temp,"/Users/albertasuncion_mac/Documents/SMU/6306 - Intro to DS/temp.csv")
write.csv(temp,"/Users/albertasuncion_mac/Documents/SMU/6306 - Intro to DS/temp.csv")
temp
temp <- subset(df_merged.sorted.quartile,select = c(1,3,32:38))
temp
write.csv(temp,"/Users/albertasuncion_mac/Documents/SMU/6306 - Intro to DS/temp.csv")
temp <- subset(df_merged.sorted.quartile,select(Ranking>0))
temp <- subset(df_merged.sorted.quartile,select(as.numeric(Ranking)>0))
temp <- subset(df_merged.sorted.quartile,as.numeric(Ranking)>0)
temp <- subset(df_merged.sorted.quartile,as.numeric(Ranking)>0,select = c(1,3,32:38))
temp
length(temp)
temp <- subset(df_merged.sorted.quartile,as.numeric(Ranking)>0)
length(temp)
length(df_merged.sorted.quartile)
length(df_merged.sorted)
write.csv(temp,"/Users/albertasuncion_mac/Documents/SMU/6306 - Intro to DS/temp.csv")
df_merged.sorted.quartile[,2]
temp <- subset(df_merged.sorted.quartile,as.numeric(Ranking)!=0)
dim(temp)
temp <- subset(df_merged.sorted.quartile,as.numeric(Ranking)>=1)
dim(temp)
temp <- subset(df_merged.sorted.quartile,as.numeric(Ranking)!="")
dim(temp)
temp <- subset(df_merged.sorted.quartile,as.numeric(df_merged.sorted.quartile$Ranking)!="")
dim(temp)
temp <- subset(df_merged.sorted.quartile,as.numeric(Ranking)==0)
dim(temp)
temp <- subset(df_merged.sorted.quartile,as.numeric(Ranking)=="")
dim(temp)
temp <- subset(df_merged.sorted.quartile,as.numeric(Ranking)>0)
dim(temp)
temp <- subset(df_merged.sorted.quartile,as.numeric(Ranking)==190)
dim(temp)
temp <- subset(df_merged.sorted.quartile,as.numeric(Ranking)>180)
dim(temp)
temp <- subset(df_merged.sorted.quartile,as.numeric(Ranking)>1)
dim(temp)
temp <- subset(df_merged.sorted.quartile,as.numeric(Ranking)>0)
dim(temp)
temp <- subset(df_merged.sorted.quartile,as.numeric(Ranking)>=1)
dim(temp)
temp <- subset(df_merged.sorted.quartile,as.numeric(Ranking)>=5)
dim(temp)
temp <- subset(df_merged.sorted.quartile,as.numeric(Ranking)==1)
dim(temp)
temp <- subset(df_merged.sorted,as.numeric(Ranking)>0)
dim(temp)
write.csv(temp,"/Users/albertasuncion_mac/Documents/SMU/6306 - Intro to DS/temp.csv")
temp <- subset(df_merged.sorted,as.numeric(Ranking2)>0)
dim(temp)
temp <- subset(df_merged.sorted,as.numeric(Ranking)==1)
dim(temp)
temp <- subset(df_merged.sorted,as.numeric(Ranking2)==1)
dim(temp)
temp <- subset(df_merged.sorted,as.numeric(Ranking2)==0)
dim(temp)
temp <- subset(df_merged.sorted,as.numeric(Ranking)==0)
dim(temp)
ls(temp$Ranking)
ls[,temp$Ranking]
temp[,Rankiing]
temp[,"Rankiing"]
temp[,"Ranking"]
temp <- subset(df_merged.sorted,as.numeric(Ranking2)>0)
temp[,"Ranking"]
?as.numeric
temp$Ranking3 <- as.numeric(temp$Ranking)
class(temp$Ranking3)
temp <- subset(df_merged.sorted,as.numeric(Ranking3)>0)
temp <- subset(df_merged.sorted,Ranking3>0)
temp$Ranking3 <- as.numeric(temp$Ranking)
df_merged.sorted$Ranking3 <- as.numeric(Ranking)
df_merged.sorted$Ranking3 <- as.numeric(df_merged.sorted$Ranking)
temp <- subset(df_merged.sorted,Ranking3>0)
dim(temp)
temp <- subset(df_merged.sorted,Ranking3!="")
dim(temp)
temp[,"Ranking3"]
temp[,"Ranking"]
df_merged.sorted$Ranking3 <- as.integer(df_merged.sorted$Ranking)
temp[,"Ranking3"]
df_merged.sorted[,Rabking3]
df_merged.sorted[,Ranking3]
class(df_merged.sorted$Ranking3)
df_merged.sorted[,Ranking]
df_merged.sorted$Ranking3 <- as.integer(as.character(df_merged.sorted$Ranking))
df_merged.sorted[,Ranking3]
temp <- subset(df_merged.sorted,Ranking3>0)
dim(temp)
#converting the df_merged.sorted$Ranking column to numeric and creating a new variable Ranking2 for the transformed column
df_merged.sorted$Ranking2 <- as.numeric(as.character(df_merged.sorted$Ranking))
#create vectors for "High income: OECD" and "High income: nonOECD" groups
HighIncomeOECD <- subset(df_merged.sorted$Ranking2, df_merged.sorted$Income.Group == "High income: OECD")
HighIncomeNonOECD <- subset(df_merged.sorted$Ranking2, df_merged.sorted$Income.Group == "High income: nonOECD")
#calculate the means of the HighIncomeOECD and HighIncomeNonOECD vectors
Avg_HighIncomeOECD <- mean(HighIncomeOECD)
Avg_HighIncomeNonOECD <- mean(HighIncomeNonOECD)
Avg_HighIncomeOECD
Avg_HighIncomeNonOECD
#create vectors for "High income: OECD" and "High income: nonOECD" groups
HighIncomeOECD <- subset(df_merged.sorted$Ranking2, df_merged.sorted$Income.Group == "High income: OECD")
HighIncomeNonOECD <- subset(df_merged.sorted$Ranking2, df_merged.sorted$Income.Group == "High income: nonOECD")
#calculate the means of the HighIncomeOECD and HighIncomeNonOECD vectors
Avg_HighIncomeOECD <- mean(HighIncomeOECD, na.rm=TRUE)
Avg_HighIncomeNonOECD <- mean(HighIncomeNonOECD, na.rm=TRU)
#create vectors for "High income: OECD" and "High income: nonOECD" groups
HighIncomeOECD <- subset(df_merged.sorted$Ranking2, df_merged.sorted$Income.Group == "High income: OECD")
HighIncomeNonOECD <- subset(df_merged.sorted$Ranking2, df_merged.sorted$Income.Group == "High income: nonOECD")
#calculate the means of the HighIncomeOECD and HighIncomeNonOECD vectors
Avg_HighIncomeOECD <- mean(HighIncomeOECD, na.rm=TRUE)
Avg_HighIncomeNonOECD <- mean(HighIncomeNonOECD, na.rm=TRUE)
Avg_HighIncomeOECD
Avg_HighIncomeNonOECD
#Transform Ranking column to numeric
df_merged$Ranking2 <- as.numeric(as.character(df_merged$Ranking))
#Create a new dataframe for records with valid rankings
df_merged.sorted <- subset(df_merged, df_merged$Ranking2>0)
df_merged.sorted$GDP2 <- as.numeric(gsub(",","",df_merged$GDP))
#Transform Ranking column to numeric
df_merged$Ranking2 <- as.numeric(as.character(df_merged$Ranking))
#Create a new dataframe for records with valid rankings
df_merged.sorted <- subset(df_merged, df_merged$Ranking2>0)
df_merged.sorted$GDP2 <- as.numeric(gsub(",","",df_merged$.sortedGDP))
#Transform Ranking column to numeric
df_merged$Ranking2 <- as.numeric(as.character(df_merged$Ranking))
#Create a new dataframe for records with valid rankings
df_merged.sorted <- subset(df_merged, df_merged$Ranking2>0)
df_merged.sorted$GDP2 <- as.numeric(gsub(",","",df_merged.sorted$GDP))
df_merged.sorted <- arrange(df_merged.sorted,GDP2)
df_merged.sorted[13,1:2]
#create vectors for "High income: OECD" and "High income: nonOECD" groups
HighIncomeOECD <- subset(df_merged.sorted$Ranking2, df_merged.sorted$Income.Group == "High income: OECD")
HighIncomeNonOECD <- subset(df_merged.sorted$Ranking2, df_merged.sorted$Income.Group == "High income: nonOECD")
#calculate the means of the HighIncomeOECD and HighIncomeNonOECD vectors, disregarding NA
Avg_HighIncomeOECD <- mean(HighIncomeOECD, na.rm=TRUE)
Avg_HighIncomeNonOECD <- mean(HighIncomeNonOECD, na.rm=TRUE)
Avg_HighIncomeOECD
Avg_HighIncomeNonOECD
dim(HighIncomeOECD)
HighIncomeOECD <- subset(df_merged.sorted$Ranking2, df_merged.sorted$Income.Group == "High income: OECD")
dim(HighIncomeOECD)
HighIncomeOECD[,1]
dim(df_merged.sorted)
df_merged.sorted[, 36]
#create vectors for "High income: OECD" and "High income: nonOECD" groups
HighIncomeOECD <- subset(df_merged.sorted, df_merged.sorted$Income.Group == "High income: OECD")
HighIncomeNonOECD <- subset(df_merged.sorted, df_merged.sorted$Income.Group == "High income: nonOECD")
#calculate the means of the HighIncomeOECD and HighIncomeNonOECD vectors, disregarding NA
Avg_HighIncomeOECD <- mean(HighIncomeOECD, na.rm=TRUE)
Avg_HighIncomeNonOECD <- mean(HighIncomeNonOECD, na.rm=TRUE)
Avg_HighIncomeOECD
Avg_HighIncomeNonOECD
dim(HighIncomeOECD)
#create vectors for "High income: OECD" and "High income: nonOECD" groups
HighIncomeOECD <- subset(df_merged.sorted, df_merged.sorted$Income.Group == "High income: OECD")
HighIncomeNonOECD <- subset(df_merged.sorted, df_merged.sorted$Income.Group == "High income: nonOECD")
#calculate the means of the HighIncomeOECD and HighIncomeNonOECD vectors, disregarding NA
Avg_HighIncomeOECD <- mean(HighIncomeOECD$Ranking2, na.rm=TRUE)
Avg_HighIncomeNonOECD <- mean(HighIncomeNonOECD$Ranking2, na.rm=TRUE)
Avg_HighIncomeOECD
Avg_HighIncomeNonOECD
write.csv(HighIncomeOECD,"/Users/albertasuncion_mac/Documents/SMU/6306 - Intro to DS/temp3.csv")
p <- ggplot(subset(df_merged.sorted, Income.Group!=""), aes(y=reorder(CountryCode,GDP2),x=GDP2)) + geom_text(aes(color=Income.Group, label=CountryCode, size = 1)) + theme(axis.text=element_text(size=6)) + scale_x_continuous(name="GDP", labels=dollar) + ylab("Country") + facet_grid(. ~ Income.Group)
q <- ggplot(subset(df_merged.sorted, Income.Group!=""), aes(y=reorder(CountryCode,GDP2),x=GDP2)) + geom_point(aes(color=Income.Group)) + theme(axis.text=element_text(size=6)) + scale_x_continuous(name="GDP", labels=dollar) + ylab("Country") + facet_grid(. ~ Income.Group)
print(q)
ggsave("/Users/albertasuncion_mac/Documents/SMU/test.png", width=11, height = 14, dpi=300)
a <- ggplot(subset(df_merged.sorted, Income.Group=="High income: OECD"), aes(y=reorder(CountryCode,GDP2),x=GDP2)) + geom_point(aes(color=Income.Group)) + geom_point(colour="tomato") + theme(axis.text=element_text(size=6)) + scale_x_continuous(name="GDP", labels=dollar) + ylab("Country") + theme(legend.position = "none") + ggtitle("High Income: OECD") + theme(plot.title = element_text(size = 10, face="bold"))
b <- ggplot(subset(df_merged.sorted, Income.Group=="High income: nonOECD"), aes(y=reorder(CountryCode,GDP2),x=GDP2)) + geom_point(aes(color=Income.Group)) + geom_point(colour="steelblue") + theme(axis.text=element_text(size=6)) + scale_x_continuous(name="GDP", labels=dollar) + ylab("Country") + theme(legend.position = "none") + ggtitle("High Income: nonOECD") + theme(plot.title = element_text(size = 10, face="bold"))
c <- ggplot(subset(df_merged.sorted, Income.Group=="Upper middle income"), aes(y=reorder(CountryCode,GDP2),x=GDP2)) + geom_point(aes(color=Income.Group)) + geom_point(colour="seagreen") + theme(axis.text=element_text(size=6)) + scale_x_continuous(name="GDP", labels=dollar) + ylab("Country") + theme(legend.position = "none") + ggtitle("Upper Middle Income") + theme(plot.title = element_text(size = 10, face="bold"))
d <- ggplot(subset(df_merged.sorted, Income.Group=="Lower middle income"), aes(y=reorder(CountryCode,GDP2),x=GDP2)) + geom_point(aes(color=Income.Group)) + geom_point(colour="slateblue") + theme(axis.text=element_text(size=6)) + scale_x_continuous(name="GDP", labels=dollar) + ylab("Country") + theme(legend.position = "none") + ggtitle("Lower Middle Income") + theme(plot.title = element_text(size = 10, face="bold"))
e <- ggplot(subset(df_merged.sorted, Income.Group=="Low income"), aes(y=reorder(CountryCode,GDP2),x=GDP2)) + geom_point(aes(color=Income.Group)) + geom_point(colour="sienna") + theme(axis.text=element_text(size=6)) + scale_x_continuous(name="GDP", labels=dollar) + ylab("Country") + theme(legend.position = "none") + ggtitle("Low Income") + theme(plot.title = element_text(size = 10, face="bold"))
grid.arrange(arrangeGrob(a, b, c, ncol=3, heights = 20))
grid.arrange(arrangeGrob(d, e , ncol=3, heights = 20))
#Use the sorted data frame
#Filter records where GDP is NA
df_merged.sorted.nonNAGDP <- df_merged.sorted %>% filter(!is.na(GDP2))
#Create a grouping by Income Group
df_merged.sorted.nonNAGDP.grouped <- group_by(df_merged.sorted.nonNAGDP,Income.Group)
#Summarize GDP by Income Group, and summarize basic statistics
options(dplyr.width=Inf) #options forces all columns to appear in the output
summarise(df_merged.sorted.nonNAGDP.grouped,countries=n(),totGDP=dollar(sum(GDP2,na.rm=TRUE)),minGDP=dollar(min(GDP2,na.rm=TRUE)),maxGDP=dollar(max(GDP2,na.rm=TRUE)),meanGDP=dollar(mean(GDP2, na.rm=TRUE)),stddevGDP=dollar(sd(GDP2,na.rm=TRUE)))
#Add a column for the
df_merged.sorted.quartile <- setDT(df_merged.sorted)[, quartile := cut(df_merged.sorted$Ranking2, quantile(df_merged.sorted$Ranking2, probs=0:5/5), include.lowest=TRUE, labels=FALSE)]
#Create a grouping by Income Group
df_merged.sorted.quartile.grouped <- group_by(df_merged.sorted.quartile,Income.Group,quartile)
#Summarize GDP by Income Group, and summarize basic statistics
SummaryStat <- aggregate(data=df_merged.sorted.quartile, df_merged.sorted.quartile$GDP2 ~ df_merged.sorted.quartile$Income.Group + df_merged.sorted.quartile$quartile, FUN=length)
SummaryStat
#Use the sorted data frame
#Filter records where GDP is NA
df_merged.sorted.nonNAGDP <- df_merged.sorted %>% filter(!is.na(GDP2))
#Create a grouping by Income Group
df_merged.sorted.nonNAGDP.grouped <- group_by(df_merged.sorted.nonNAGDP,Income.Group)
#Summarize GDP by Income Group, and summarize basic statistics
options(dplyr.width=Inf) #options forces all columns to appear in the output
summarise(df_merged.sorted.nonNAGDP.grouped,countries=n(),totGDP=dollar(sum(GDP2,na.rm=TRUE)),minGDP=dollar(min(GDP2,na.rm=TRUE)),maxGDP=dollar(max(GDP2,na.rm=TRUE)),meanGDP=dollar(mean(GDP2, na.rm=TRUE)),stddevGDP=dollar(sd(GDP2,na.rm=TRUE)))
#Add a column for the
df_merged.sorted.quartile <- setDT(df_merged.sorted)[, quartile := cut(df_merged.sorted$Ranking2, quantile(df_merged.sorted$Ranking2, probs=0:5/5), include.lowest=TRUE, labels=FALSE)]
#Create a grouping by Income Group
df_merged.sorted.quartile.grouped <- group_by(df_merged.sorted.quartile,Income.Group,quartile)
#Summarize GDP by Income Group, and summarize basic statistics
SummaryStat <- aggregate(data=df_merged.sorted.quartile, df_merged.sorted.quartile$GDP2 ~ df_merged.sorted.quartile$Income.Group + df_merged.sorted.quartile$quartile, FUN=length)
SummaryStat
#Add a column for the
df_merged.sorted.quartile <- setDT(df_merged.sorted)[, quartile := cut(df_merged.sorted$Ranking2, quantile(df_merged.sorted$Ranking2, probs=0:5/5), include.lowest=TRUE, labels=FALSE)]
#Create a grouping by Income Group
df_merged.sorted.quartile.grouped <- group_by(df_merged.sorted.quartile,Income.Group,quartile)
#Summarize GDP by Income Group, and summarize basic statistics
SummaryStat <- aggregate(data=df_merged.sorted.quartile, df_merged.sorted.quartile$GDP2 ~ df_merged.sorted.quartile$Income.Group + df_merged.sorted.quartile$quartile, FUN=length)
SummaryStat
write.csv(SummaryStat,"/Users/albertasuncion_mac/Documents/SMU/6306 - Intro to DS/SummaryStat.csv")
setwd("/Users/albertasuncion_mac/Documents/SMU/6306 - Intro to DS/6306CaseStudy1-AAsuncion")
dir()
